# This is where all our Dockers are based on if they are generic 'linux'
DEFAULT_DISTRO=debian
DEFAULT_DISTRO_TAG=stretch

sanitize_name() {
    # Docker doesn't like / in tags
    echo $1 | sed 's@/@-@'
}

base_linux() {
    local distro=$1
    local distro_tag=$2

    # Debian has "slim" images, which are drastically smaller
    local sdistro_tag=${distro_tag}
    if [ "${distro}" = "debian" ] || [ "${distro}" = "i386/debian" ]; then
        sdistro_tag="${distro_tag}-slim"
    fi

    local tdistro=$(sanitize_name ${distro})
    local tdistro_tag=$(sanitize_name ${distro_tag})

    # We do this to deduplicate large parts of Dockerfiles
    echo ""
    echo "Building docker Linux base image based on ${distro}:${distro_tag} .."
    echo ""
    docker build \
        --pull \
        --build-arg DISTRO=${distro} \
        --build-arg DISTRO_TAG=${sdistro_tag} \
        -t openttd/base:${tdistro}-${tdistro_tag} \
        $(dirname $0)/../base-linux
}

base_osx() {
    local distro=$1
    local distro_tag=$2
    local sdk_version=$3

    local tdistro=$(sanitize_name ${distro})
    local tdistro_tag=$(sanitize_name ${distro_tag})

    if [ -z "${OSX_SDK_URL}" ]; then
        echo "Please set OSX_SDK_URL before creating OSX-based Dockers"
        echo ""
        echo "How you get the SDKs can be found here:"
        echo "https://github.com/tpoechtrager/osxcross#packaging-the-sdk"
        echo ""
        echo "By pointing to a valid URL which hosts the SDKs, we assume you read the Xcode license terms!"
        exit 1
    fi

    # We do this to deduplicate large parts of Dockerfiles
    echo ""
    echo "Building docker OSX base image based on ${distro}:${distro_tag} .."
    echo ""
    docker build \
        --build-arg DISTRO=${tdistro} \
        --build-arg DISTRO_TAG=${tdistro_tag} \
        --build-arg OSX_SDK_URL=${OSX_SDK_URL} \
        --build-arg OSX_SDK_VERSIION=${sdk_version} \
        -t openttd/base:osx-${sdk_version} \
        $(dirname $0)/../base-osx
}

build_image() {
    local distro=$1
    local distro_tag=$2
    local image_name=$3
    shift 3

    local tdistro=$(sanitize_name ${distro})
    local tdistro_tag=$(sanitize_name ${distro_tag})

    echo ""
    echo "Building docker image ${image_name} .."
    echo ""

    docker build \
        --build-arg DISTRO=${tdistro} \
        --build-arg DISTRO_TAG=${tdistro_tag} \
        "$@" \
        -t ${image_name} \
        $(dirname $0)
}

build_linux() {
    local arch=$1
    local distro=$2
    local distro_tag=$3
    local image_name=$4
    shift 4

    if [ "${arch}" != "amd64" ]; then
        distro="${arch}/${distro}"
    fi

    base_linux ${distro} ${distro_tag}
    build_image ${distro} ${distro_tag} ${image_name} "$@"
}

build_osx() {
    local distro_tag=$1
    local image_name=$2
    shift 2

    base_linux ${DEFAULT_DISTRO} ${DEFAULT_DISTRO_TAG}
    base_osx ${DEFAULT_DISTRO} ${DEFAULT_DISTRO_TAG} 10.13
    build_image "osx" ${distro_tag} ${image_name} "$@"
}

read_targets() {
    local image_name=$1

    cat $(dirname $0)/targets | while read target; do
        if [ -n "${target}" ] && [ "$(echo ${target} | cut -b1)" != "#" ]; then
            build_target ${image_name} ${target}
        fi
    done
}
